# -*- coding: utf-8 -*-
"""1015-WeatherTaxi

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LpTQeT4gPyRUlDsQGtk8NM0j-SkaHR-k
"""

import pandas as pd
import numpy as np
import seaborn as sb

from datetime import datetime
import requests

def get_taxi_avail():
  url = "https://api.data.gov.sg/v1/transport/taxi-availability"

  # Send request and get response
  response = requests.get(url)

  if response.status_code != 200:
    return

  # Parse JSON data
  data = response.json()

  data_coordinates = data['features'][0]['geometry']['coordinates']
  df_coordinates = pd.DataFrame(data_coordinates)
  df_coordinates.columns = ["LONGITUDE", "LATITUDE"]

  ts = data['features'][0]['properties']['timestamp']
  dt_object = datetime.fromisoformat(ts)

  ts_date = dt_object.date()
  ts_time = dt_object.time()
  df_coordinates["DATE"] = ts_date
  df_coordinates["TIME"] = ts_time

  return df_coordinates

# taxi_avail = get_taxi_avail()

def get_area_meta():
  url = 'https://api.data.gov.sg/v1/environment/2-hour-weather-forecast'

  # Send request and get response
  response = requests.get(url)

  if response.status_code != 200:
    return

  # Parse JSON data
  data = response.json()
  data_areameta = data['area_metadata']
  df = pd.DataFrame(data_areameta)
  latitude_values = df['label_location'].apply(lambda x: x['latitude'])
  df['LATITUDE'] = latitude_values
  longitude_values = df['label_location'].apply(lambda x: x['longitude'])
  df['LONGITUDE'] = longitude_values
  df = df.drop(columns=['label_location'])

  return df

# get_area_meta()

def get_weather():
  url = 'https://api.data.gov.sg/v1/environment/2-hour-weather-forecast'

  # Send request and get response
  response = requests.get(url)

  if response.status_code != 200:
    return

  # Parse JSON data
  data = response.json()

  data_weather = data['items'][0]['forecasts']
  df = pd.DataFrame(data_weather)
  df.columns = ["AREA", "FORECAST"]

  ts = data['items'][0]['timestamp']
  df['timestamp'] = ts
  upd_ts = data['items'][0]['update_timestamp']
  df['update_timestamp'] = upd_ts
  valid_start_ts = data['items'][0]['valid_period']['start']
  df['valid_start'] = valid_start_ts
  valid_end_ts = data['items'][0]['valid_period']['end']
  df['valid_end'] = valid_end_ts

  return df

# get_weather()

import os

def append_pkl(pkl_fp, to_add_df):
  pkl_fp = '/var/pythonbots/sc1015/'+pkl_fp
  try:
    df = pd.read_pickle(pkl_fp)
  except FileNotFoundError:
    df = pd.DataFrame()

  df = pd.concat([df, to_add_df], ignore_index=True)
  df.to_pickle(pkl_fp)

def read_pkl(pkl_fp):
  df = pd.read_pickle(pkl_fp)
  return df

append_pkl("taxi_log.pkl", get_taxi_avail())

read_pkl("taxi_log.pkl").tail()

append_pkl("weather_log.pkl", get_weather())

read_pkl("weather_log.pkl").head()

